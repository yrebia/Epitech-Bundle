#!/usr/bin/python3
##
## EPITECH PROJECT, 2021
## 103cipher
## File description:
## 103cipher
##

import sys
from math import *

# parcing :
def error():
    if len(sys.argv) == 2 and sys.argv[1] == '-h':
        print('USAGE\n\t./103cipher message key flag\n\nDESCRIPTION\n\tmessage\ta message, made of ASCII characters\n\tkey\tthe encryption key, made of ASCII characters\n\tflag\t0 for the message to be encrypted, 1 to be decrypted')
        exit(0)
    if len(sys.argv) != 4:
        exit(84)
    if sys.argv[3] != '0' and sys.argv[3] != '1':
        exit(84)

# multiplucation matrice:
def multiply_matrices(new, matrice):
    result = [[0 for i in range(len(matrice))] for j in range(len(new))]
    for i in range(len(new)):
        for j in range(len(matrice)):
            for k in range(len(matrice)):
                result[i][j] +=  (new[i][k] * matrice[k][j])
            result[i][j] = abs(result[i][j])
    return (result)

def calcul_det_2x2(matrice, det):
    tmp = matrice[0][0]
    matrice[0][0] = (1/det) * matrice[1][1]
    matrice[0][1] = (1/det) * -matrice[0][1]
    matrice[1][0] = (1/det) * -matrice[1][0]
    matrice[1][1] = (1/det) * tmp

# invertion matrice:
def invertion_matrice(matrice):
    if len(sys.argv[2]) <= 4:
        a = matrice[0][0]
        b = matrice[0][1]
        c = matrice[1][0]
        d = matrice[1][1]
        calc_det = a * d - b * c
        if (calc_det == 0):
            exit(84)
        calcul_det_2x2(matrice, calc_det)
    else:
        inv_det1 =  matrice[0][0] * (matrice[1][1] * matrice[2][2] - matrice[2][1] * matrice[1][2])
        inv_det2 =  matrice[0][1] * (matrice[1][0] * matrice[2][2] - matrice[2][0] * matrice[1][2])
        inv_det3 = matrice[0][2] * (matrice[1][0] * matrice[2][1] - matrice[2][0] * matrice[1][1])
        det =  (matrice[1][1] * matrice[2][2] - matrice[1][2] * matrice[2][1])
        det2 = (matrice[0][2] * matrice[2][1] - matrice[0][1] * matrice[2][2])
        det3 = (matrice[0][1] * matrice[1][2] - matrice[0][2] * matrice[1][1])
        det4 = (matrice[1][2] * matrice[2][0] - matrice[1][0] * matrice[2][2])
        det5 = (matrice[0][0] * matrice[2][2] - matrice[0][2] * matrice[2][0])
        det6 = (matrice[0][2] * matrice[1][0] - matrice[0][0] * matrice[1][2])
        det7 = (matrice[1][0] * matrice[2][1] - matrice[1][1] * matrice[2][0])
        det8 = (matrice[0][1] * matrice[2][0] - matrice[0][0] * matrice[2][1])
        det9 = (matrice[0][0] * matrice[1][1] - matrice[1][0] * matrice[0][1])
        inv_det = inv_det1 - inv_det2 + inv_det3
        matrice[0][0] = (1 / inv_det) * det
        matrice[0][1] = (1 / inv_det) * det2
        matrice[0][2] = (1 / inv_det) * det3
        matrice[1][0] = (1 / inv_det) * det4
        matrice[1][1] = (1 / inv_det) * det5
        matrice[1][2] = (1 / inv_det) * det6
        matrice[2][0] = (1 / inv_det) * det7
        matrice[2][1] = (1 / inv_det) * det8
        matrice[2][2] = (1 / inv_det) * det9
    return (matrice)

# matrice cle:
def key_matrice():
    if len(sys.argv[2]) <= 4:
        key = []
        for i in range(len(sys.argv[2])):
            key.append(ord(sys.argv[2][i]))
        for i in range(len(sys.argv[2]), 4):
            key.append(0)
        matrice = []
        matrice.append([key[0], key[1]])
        matrice.append([key[2], key[3]])
    else:
        key = []
        for i in range(len(sys.argv[2])):
            key.append(ord(sys.argv[2][i]))
        for i in range(len(sys.argv[2]), 9):
            key.append(0)
        matrice = []
        matrice.append([key[0], key[1], key[2]])
        matrice.append([key[3], key[4], key[5]])
        matrice.append([key[6], key[7], key[8]])
    return (matrice)

# matrice phrase
def phrase_matrice(matrice):
    key = []
    for i in range(len(sys.argv[1])):
        key.append(ord(sys.argv[1][i]))
    while ((len(key) % len(matrice)) != 0):
        key.append(0)
    matrice_p = []
    tmp = []
    c = 0
    for i in range(len(key) // len(matrice)):
        for j in range(len(matrice)):
            tmp.append(key[c])
            c += 1
        matrice_p.append(tmp)
        tmp = []
    return (matrice_p)

def phrase_matrice2(matrice):
    key = []
    argv = ''
    j = 0
    for i in range(len(sys.argv[1])):
        if (sys.argv[1][i] != ' '):
            argv += sys.argv[1][i]
        else:
            key.append(int(argv))
            argv = ''
    key.append(int(argv))
    while ((len(key) % len(matrice)) != 0):
        key.append(0)
    matrice_p = []
    tmp = []
    c = 0
    for i in range(len(key) // len(matrice)):
        for j in range(len(matrice)):
            tmp.append(key[c])
            c += 1
        matrice_p.append(tmp)
        tmp = []
    return (matrice_p)

# print matrice:
def print_matrice(matrice):
    print('Key matrix:')
    if len(matrice) <= 2:
        for i in range(2):
            print(matrice[i][0], '\t', matrice[i][1])
    else:
        for i in range(3):
            print('{:.0f}'.format(matrice[i][0]), '\t', '{:.0f}\t'.format(matrice[i][1]), '{:.0f}'.format(matrice[i][2]))
    print()
    return

def print_matrice_float(matrice):
    print('Key matrix:')
    if len(matrice) <= 2:
        for i in range(2):
            print('{:.3f}\t'.format(matrice[i][0]), '{:.3f}'.format(matrice[i][1]))
    else:
        for i in range(3):
            print('{:.3f}\t'.format(matrice[i][0]), '{:.3f}\t'.format(matrice[i][1]), '{:.3f}'.format(matrice[i][2]))
    print()
    return


# print Encrypted message:
def print_encrypted_message(crypt):
    print('Encrypted message:')
    printable = ''
    for i in range(len(crypt)):
        for j in range(len(crypt[i])):
            printable += str(crypt[i][j])
            printable += ' '
    print(printable)
    return

# print Decrypted message:
def print_decrypted_message(message):
    print('Decrypted message:')
    printable = ""
    for i in range(len(message)):
        for j in range(len(message[i])):
            printable += chr(round(message[i][j]))
    len(printable) - 10
    print(printable)
    return

# main
error()
matrice = key_matrice()
if (sys.argv[3] == '1'):
    matrice = invertion_matrice(matrice)
    print_matrice_float(matrice)
    matrice_p = phrase_matrice2(matrice)
else:
    print_matrice(matrice)
    matrice_p = phrase_matrice(matrice)
matrice_p = multiply_matrices(matrice_p, matrice)
if (sys.argv[3] == '0'):
    print_encrypted_message(matrice_p)
else:
    print_decrypted_message(matrice_p)
